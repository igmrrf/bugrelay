import{_ as d,c as e,o as i,ag as r}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Data Models Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"models/README.md","filePath":"models/README.md","lastUpdated":1761937198000}'),a={name:"models/README.md"};function o(n,t,s,l,c,u){return i(),e("div",null,[...t[0]||(t[0]=[r('<h1 id="data-models-documentation" tabindex="-1">Data Models Documentation <a class="header-anchor" href="#data-models-documentation" aria-label="Permalink to &quot;Data Models Documentation&quot;">​</a></h1><p>This document provides comprehensive documentation of the BugRelay backend database schema, including all tables, fields, constraints, and performance considerations.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The BugRelay backend uses PostgreSQL as its primary database with the following key features:</p><ul><li>UUID primary keys for all entities</li><li>Full-text search capabilities using PostgreSQL&#39;s GIN indexes</li><li>Comprehensive indexing strategy for performance optimization</li><li>Soft deletes for bug reports</li><li>Audit logging for administrative actions</li></ul><h2 id="database-tables" tabindex="-1">Database Tables <a class="header-anchor" href="#database-tables" aria-label="Permalink to &quot;Database Tables&quot;">​</a></h2><h3 id="core-entity-tables" tabindex="-1">Core Entity Tables <a class="header-anchor" href="#core-entity-tables" aria-label="Permalink to &quot;Core Entity Tables&quot;">​</a></h3><h4 id="users" tabindex="-1">users <a class="header-anchor" href="#users" aria-label="Permalink to &quot;users&quot;">​</a></h4><p><strong>Purpose</strong>: Stores user account information and authentication data</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique user identifier</td></tr><tr><td>email</td><td>VARCHAR(255)</td><td>UNIQUE, NOT NULL</td><td>-</td><td>User&#39;s email address</td></tr><tr><td>display_name</td><td>VARCHAR(100)</td><td>NOT NULL</td><td>-</td><td>User&#39;s display name</td></tr><tr><td>avatar_url</td><td>TEXT</td><td>-</td><td>NULL</td><td>URL to user&#39;s avatar image</td></tr><tr><td>password_hash</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>bcrypt hash of password (null for OAuth-only users)</td></tr><tr><td>auth_provider</td><td>VARCHAR(20)</td><td>NOT NULL</td><td>&#39;email&#39;</td><td>Authentication provider (email, google, github)</td></tr><tr><td>auth_provider_id</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>OAuth provider user ID</td></tr><tr><td>is_email_verified</td><td>BOOLEAN</td><td>-</td><td>FALSE</td><td>Email verification status</td></tr><tr><td>email_verification_token</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>Token for email verification</td></tr><tr><td>password_reset_token</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>Token for password reset</td></tr><tr><td>password_reset_expires</td><td>TIMESTAMP</td><td>-</td><td>NULL</td><td>Password reset token expiration</td></tr><tr><td>is_admin</td><td>BOOLEAN</td><td>-</td><td>FALSE</td><td>Administrative privileges flag</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Account creation timestamp</td></tr><tr><td>last_active_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Last activity timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_users_email</code> - Unique email lookup</li><li><code>idx_users_auth_provider</code> - OAuth provider lookup</li><li><code>idx_users_last_active</code> - Activity-based queries</li><li><code>idx_users_email_verified</code> - Verified user queries</li></ul><h4 id="companies" tabindex="-1">companies <a class="header-anchor" href="#companies" aria-label="Permalink to &quot;companies&quot;">​</a></h4><p><strong>Purpose</strong>: Stores company information and verification status</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique company identifier</td></tr><tr><td>name</td><td>VARCHAR(255)</td><td>NOT NULL</td><td>-</td><td>Company name</td></tr><tr><td>domain</td><td>VARCHAR(255)</td><td>UNIQUE, NOT NULL</td><td>-</td><td>Company domain for verification</td></tr><tr><td>is_verified</td><td>BOOLEAN</td><td>-</td><td>FALSE</td><td>Verification status</td></tr><tr><td>verification_token</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>Token for domain verification</td></tr><tr><td>verification_email</td><td>VARCHAR(255)</td><td>-</td><td>NULL</td><td>Email used for verification</td></tr><tr><td>verified_at</td><td>TIMESTAMP</td><td>-</td><td>NULL</td><td>Verification completion timestamp</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Company registration timestamp</td></tr><tr><td>updated_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Last update timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_companies_name_trgm</code> - Fuzzy name search using trigrams</li><li><code>idx_companies_verified</code> - Verified company queries</li></ul><h4 id="applications" tabindex="-1">applications <a class="header-anchor" href="#applications" aria-label="Permalink to &quot;applications&quot;">​</a></h4><p><strong>Purpose</strong>: Stores application information that can receive bug reports</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique application identifier</td></tr><tr><td>name</td><td>VARCHAR(255)</td><td>NOT NULL</td><td>-</td><td>Application name</td></tr><tr><td>url</td><td>TEXT</td><td>-</td><td>NULL</td><td>Application URL</td></tr><tr><td>company_id</td><td>UUID</td><td>FOREIGN KEY → companies(id)</td><td>NULL</td><td>Associated company</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Application creation timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_applications_name_trgm</code> - Fuzzy name search using trigrams</li></ul><h4 id="bug-reports" tabindex="-1">bug_reports <a class="header-anchor" href="#bug-reports" aria-label="Permalink to &quot;bug_reports&quot;">​</a></h4><p><strong>Purpose</strong>: Core table storing bug report information and metadata</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique bug report identifier</td></tr><tr><td>title</td><td>VARCHAR(255)</td><td>NOT NULL</td><td>-</td><td>Bug report title</td></tr><tr><td>description</td><td>TEXT</td><td>NOT NULL</td><td>-</td><td>Detailed bug description</td></tr><tr><td>status</td><td>VARCHAR(20)</td><td>-</td><td>&#39;open&#39;</td><td>Bug status (open, reviewing, fixed, wont_fix)</td></tr><tr><td>priority</td><td>VARCHAR(20)</td><td>-</td><td>&#39;medium&#39;</td><td>Bug priority (low, medium, high, critical)</td></tr><tr><td>tags</td><td>TEXT[]</td><td>-</td><td>NULL</td><td>Array of tags for categorization</td></tr><tr><td>operating_system</td><td>VARCHAR(100)</td><td>-</td><td>NULL</td><td>OS where bug occurred</td></tr><tr><td>device_type</td><td>VARCHAR(100)</td><td>-</td><td>NULL</td><td>Device type information</td></tr><tr><td>app_version</td><td>VARCHAR(50)</td><td>-</td><td>NULL</td><td>Application version</td></tr><tr><td>browser_version</td><td>VARCHAR(100)</td><td>-</td><td>NULL</td><td>Browser version information</td></tr><tr><td>application_id</td><td>UUID</td><td>FOREIGN KEY → applications(id), NOT NULL</td><td>-</td><td>Associated application</td></tr><tr><td>reporter_id</td><td>UUID</td><td>FOREIGN KEY → users(id)</td><td>NULL</td><td>Bug reporter (null for anonymous)</td></tr><tr><td>assigned_company_id</td><td>UUID</td><td>FOREIGN KEY → companies(id)</td><td>NULL</td><td>Company assigned to handle bug</td></tr><tr><td>vote_count</td><td>INTEGER</td><td>-</td><td>0</td><td>Number of upvotes</td></tr><tr><td>comment_count</td><td>INTEGER</td><td>-</td><td>0</td><td>Number of comments</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Bug report creation timestamp</td></tr><tr><td>updated_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Last update timestamp</td></tr><tr><td>deleted_at</td><td>TIMESTAMP</td><td>-</td><td>NULL</td><td>Soft delete timestamp</td></tr><tr><td>resolved_at</td><td>TIMESTAMP</td><td>-</td><td>NULL</td><td>Resolution timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_bug_reports_status</code> - Status-based filtering</li><li><code>idx_bug_reports_created_at</code> - Chronological sorting</li><li><code>idx_bug_reports_vote_count</code> - Popularity sorting</li><li><code>idx_bug_reports_application_id</code> - Application-specific queries</li><li><code>idx_bug_reports_company_id</code> - Company-assigned bugs</li><li><code>idx_bug_reports_fulltext_search</code> - Full-text search on title and description</li><li><code>idx_bug_reports_tags_gin</code> - Tag-based filtering</li><li><code>idx_bug_reports_trending</code> - Trending bugs (recent + high votes)</li><li><code>idx_bug_reports_open_recent</code> - Recent open bugs</li><li><code>idx_bug_reports_high_priority</code> - High priority bugs</li></ul><h3 id="relationship-tables" tabindex="-1">Relationship Tables <a class="header-anchor" href="#relationship-tables" aria-label="Permalink to &quot;Relationship Tables&quot;">​</a></h3><h4 id="company-members" tabindex="-1">company_members <a class="header-anchor" href="#company-members" aria-label="Permalink to &quot;company_members&quot;">​</a></h4><p><strong>Purpose</strong>: Many-to-many relationship between users and companies</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique membership identifier</td></tr><tr><td>company_id</td><td>UUID</td><td>FOREIGN KEY → companies(id), NOT NULL</td><td>-</td><td>Company reference</td></tr><tr><td>user_id</td><td>UUID</td><td>FOREIGN KEY → users(id), NOT NULL</td><td>-</td><td>User reference</td></tr><tr><td>role</td><td>VARCHAR(20)</td><td>-</td><td>&#39;member&#39;</td><td>User role in company (member, admin)</td></tr><tr><td>added_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Membership creation timestamp</td></tr></tbody></table><p><strong>Constraints</strong>:</p><ul><li>UNIQUE(company_id, user_id) - Prevents duplicate memberships</li></ul><p><strong>Indexes</strong>:</p><ul><li><code>idx_company_members_company_user</code> - Membership lookup</li><li><code>idx_company_members_user_role</code> - User role queries</li></ul><h4 id="bug-votes" tabindex="-1">bug_votes <a class="header-anchor" href="#bug-votes" aria-label="Permalink to &quot;bug_votes&quot;">​</a></h4><p><strong>Purpose</strong>: Tracks user votes on bug reports</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique vote identifier</td></tr><tr><td>bug_id</td><td>UUID</td><td>FOREIGN KEY → bug_reports(id), NOT NULL</td><td>-</td><td>Bug report reference</td></tr><tr><td>user_id</td><td>UUID</td><td>FOREIGN KEY → users(id), NOT NULL</td><td>-</td><td>User reference</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Vote timestamp</td></tr></tbody></table><p><strong>Constraints</strong>:</p><ul><li>UNIQUE(bug_id, user_id) - Prevents duplicate votes</li></ul><p><strong>Indexes</strong>:</p><ul><li><code>idx_bug_votes_bug_user</code> - Vote lookup and duplicate prevention</li><li><code>idx_bug_votes_user_created</code> - User voting history</li></ul><h4 id="comments" tabindex="-1">comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;comments&quot;">​</a></h4><p><strong>Purpose</strong>: Stores comments on bug reports</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique comment identifier</td></tr><tr><td>bug_id</td><td>UUID</td><td>FOREIGN KEY → bug_reports(id), NOT NULL</td><td>-</td><td>Bug report reference</td></tr><tr><td>user_id</td><td>UUID</td><td>FOREIGN KEY → users(id), NOT NULL</td><td>-</td><td>Comment author</td></tr><tr><td>content</td><td>TEXT</td><td>NOT NULL</td><td>-</td><td>Comment content</td></tr><tr><td>is_company_response</td><td>BOOLEAN</td><td>-</td><td>FALSE</td><td>Flag for official company responses</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Comment creation timestamp</td></tr><tr><td>updated_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Last update timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_comments_bug_created</code> - Bug-specific comment listing</li><li><code>idx_comments_user_created</code> - User comment history</li><li><code>idx_comments_company_response</code> - Company response filtering</li></ul><h4 id="file-attachments" tabindex="-1">file_attachments <a class="header-anchor" href="#file-attachments" aria-label="Permalink to &quot;file_attachments&quot;">​</a></h4><p><strong>Purpose</strong>: Stores file attachments for bug reports</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique attachment identifier</td></tr><tr><td>bug_id</td><td>UUID</td><td>FOREIGN KEY → bug_reports(id), NOT NULL</td><td>-</td><td>Bug report reference</td></tr><tr><td>filename</td><td>VARCHAR(255)</td><td>NOT NULL</td><td>-</td><td>Original filename</td></tr><tr><td>file_url</td><td>TEXT</td><td>NOT NULL</td><td>-</td><td>URL to stored file</td></tr><tr><td>file_size</td><td>INTEGER</td><td>-</td><td>NULL</td><td>File size in bytes</td></tr><tr><td>mime_type</td><td>VARCHAR(100)</td><td>-</td><td>NULL</td><td>File MIME type</td></tr><tr><td>uploaded_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Upload timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_file_attachments_bug</code> - Bug-specific attachment listing</li></ul><h3 id="security-and-audit-tables" tabindex="-1">Security and Audit Tables <a class="header-anchor" href="#security-and-audit-tables" aria-label="Permalink to &quot;Security and Audit Tables&quot;">​</a></h3><h4 id="jwt-blacklist" tabindex="-1">jwt_blacklist <a class="header-anchor" href="#jwt-blacklist" aria-label="Permalink to &quot;jwt_blacklist&quot;">​</a></h4><p><strong>Purpose</strong>: Tracks invalidated JWT tokens for security</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique blacklist entry identifier</td></tr><tr><td>token_jti</td><td>VARCHAR(255)</td><td>UNIQUE, NOT NULL</td><td>-</td><td>JWT ID claim</td></tr><tr><td>user_id</td><td>UUID</td><td>FOREIGN KEY → users(id), NOT NULL</td><td>-</td><td>Token owner</td></tr><tr><td>expires_at</td><td>TIMESTAMP</td><td>NOT NULL</td><td>-</td><td>Token expiration time</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Blacklist entry timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_jwt_blacklist_token</code> - Token validation lookup</li><li><code>idx_jwt_blacklist_expires</code> - Expired token cleanup</li><li><code>idx_jwt_blacklist_expires_token</code> - Active token validation</li></ul><h4 id="audit-logs" tabindex="-1">audit_logs <a class="header-anchor" href="#audit-logs" aria-label="Permalink to &quot;audit_logs&quot;">​</a></h4><p><strong>Purpose</strong>: Tracks administrative actions for security and compliance</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Constraints</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>UUID</td><td>PRIMARY KEY</td><td>uuid_generate_v4()</td><td>Unique audit log identifier</td></tr><tr><td>action</td><td>VARCHAR(100)</td><td>NOT NULL</td><td>-</td><td>Action performed</td></tr><tr><td>resource</td><td>VARCHAR(100)</td><td>NOT NULL</td><td>-</td><td>Resource type affected</td></tr><tr><td>resource_id</td><td>UUID</td><td>-</td><td>NULL</td><td>Specific resource identifier</td></tr><tr><td>details</td><td>TEXT</td><td>-</td><td>NULL</td><td>Additional action details</td></tr><tr><td>user_id</td><td>UUID</td><td>FOREIGN KEY → users(id), NOT NULL</td><td>-</td><td>User who performed action</td></tr><tr><td>ip_address</td><td>VARCHAR(45)</td><td>-</td><td>NULL</td><td>IP address of user</td></tr><tr><td>user_agent</td><td>VARCHAR(500)</td><td>-</td><td>NULL</td><td>User agent string</td></tr><tr><td>created_at</td><td>TIMESTAMP</td><td>-</td><td>NOW()</td><td>Action timestamp</td></tr></tbody></table><p><strong>Indexes</strong>:</p><ul><li><code>idx_audit_logs_action</code> - Action-based filtering</li><li><code>idx_audit_logs_resource</code> - Resource-based filtering</li><li><code>idx_audit_logs_user_id</code> - User action history</li><li><code>idx_audit_logs_created_at</code> - Chronological queries</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><h3 id="indexing-strategy" tabindex="-1">Indexing Strategy <a class="header-anchor" href="#indexing-strategy" aria-label="Permalink to &quot;Indexing Strategy&quot;">​</a></h3><ol><li><strong>Primary Indexes</strong>: All tables use UUID primary keys with automatic generation</li><li><strong>Unique Indexes</strong>: Email addresses, company domains, and composite keys for preventing duplicates</li><li><strong>Foreign Key Indexes</strong>: All foreign key relationships are indexed for join performance</li><li><strong>Full-Text Search</strong>: GIN indexes on bug report titles and descriptions for search functionality</li><li><strong>Composite Indexes</strong>: Multi-column indexes for common query patterns</li><li><strong>Partial Indexes</strong>: Conditional indexes for frequently filtered subsets</li></ol><h3 id="query-optimization" tabindex="-1">Query Optimization <a class="header-anchor" href="#query-optimization" aria-label="Permalink to &quot;Query Optimization&quot;">​</a></h3><ol><li><strong>Trending Bugs</strong>: Composite index on creation date and vote count for trending algorithms</li><li><strong>Tag Filtering</strong>: GIN index on tag arrays for efficient tag-based queries</li><li><strong>Fuzzy Search</strong>: Trigram indexes for approximate string matching on names</li><li><strong>Time-Based Queries</strong>: Optimized indexes for date range filtering</li><li><strong>Status Filtering</strong>: Partial indexes for common status-based queries</li></ol><h3 id="maintenance-operations" tabindex="-1">Maintenance Operations <a class="header-anchor" href="#maintenance-operations" aria-label="Permalink to &quot;Maintenance Operations&quot;">​</a></h3><ol><li><strong>Token Cleanup</strong>: Regular cleanup of expired JWT blacklist entries</li><li><strong>Soft Delete Cleanup</strong>: Periodic cleanup of soft-deleted bug reports</li><li><strong>Index Maintenance</strong>: Regular VACUUM and ANALYZE operations for optimal performance</li><li><strong>Statistics Updates</strong>: Automatic statistics updates for query planner optimization</li></ol><h2 id="data-integrity" tabindex="-1">Data Integrity <a class="header-anchor" href="#data-integrity" aria-label="Permalink to &quot;Data Integrity&quot;">​</a></h2><h3 id="foreign-key-constraints" tabindex="-1">Foreign Key Constraints <a class="header-anchor" href="#foreign-key-constraints" aria-label="Permalink to &quot;Foreign Key Constraints&quot;">​</a></h3><p>All relationships are enforced through foreign key constraints with appropriate cascading rules:</p><ul><li>User deletions cascade to related votes, comments, and audit logs</li><li>Bug report deletions cascade to votes, comments, and attachments</li><li>Company deletions cascade to applications and memberships</li></ul><h3 id="validation-rules" tabindex="-1">Validation Rules <a class="header-anchor" href="#validation-rules" aria-label="Permalink to &quot;Validation Rules&quot;">​</a></h3><ol><li><strong>Email Format</strong>: Email addresses are validated at the application level</li><li><strong>Status Values</strong>: Bug status and priority values are validated using enums</li><li><strong>UUID Format</strong>: All UUID fields are validated for proper format</li><li><strong>Required Fields</strong>: NOT NULL constraints enforce required data</li><li><strong>Unique Constraints</strong>: Prevent duplicate emails, domains, and votes</li></ol><h3 id="data-consistency" tabindex="-1">Data Consistency <a class="header-anchor" href="#data-consistency" aria-label="Permalink to &quot;Data Consistency&quot;">​</a></h3><ol><li><strong>Vote Counting</strong>: Vote counts are maintained through triggers or application logic</li><li><strong>Comment Counting</strong>: Comment counts are updated when comments are added/removed</li><li><strong>Timestamp Management</strong>: Created/updated timestamps are automatically managed</li><li><strong>Soft Deletes</strong>: Deleted records are marked with timestamps rather than physically removed</li></ol>',78)])])}const m=d(a,[["render",o]]);export{h as __pageData,m as default};
