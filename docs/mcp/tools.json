{
  "tools": [
    {
      "name": "create_bug_report",
      "description": "Create a new bug report in the BugRelay system",
      "inputSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Bug report title (max 255 characters)",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the bug"
          },
          "application_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the application where the bug was found"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "description": "Priority level of the bug",
            "default": "medium"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of tags to categorize the bug"
          },
          "operating_system": {
            "type": "string",
            "description": "Operating system where the bug occurred",
            "maxLength": 100
          },
          "device_type": {
            "type": "string",
            "description": "Type of device (mobile, desktop, tablet, etc.)",
            "maxLength": 100
          },
          "app_version": {
            "type": "string",
            "description": "Version of the application",
            "maxLength": 50
          },
          "browser_version": {
            "type": "string",
            "description": "Browser version if applicable",
            "maxLength": 100
          },
          "recaptcha_token": {
            "type": "string",
            "description": "reCAPTCHA token (required for anonymous users)"
          }
        },
        "required": ["title", "description", "application_id"]
      }
    },
    {
      "name": "get_bug_report",
      "description": "Retrieve a specific bug report by ID",
      "inputSchema": {
        "type": "object",
        "properties": {
          "bug_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the bug report to retrieve"
          }
        },
        "required": ["bug_id"]
      }
    },
    {
      "name": "list_bug_reports",
      "description": "List bug reports with optional filtering and pagination",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Page number for pagination",
            "default": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Number of results per page",
            "default": 20
          },
          "status": {
            "type": "string",
            "enum": ["open", "reviewing", "fixed", "wont_fix"],
            "description": "Filter by bug status"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "description": "Filter by priority level"
          },
          "application_id": {
            "type": "string",
            "format": "uuid",
            "description": "Filter by application ID"
          },
          "search": {
            "type": "string",
            "description": "Search term for title and description"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by tags"
          }
        }
      }
    },
    {
      "name": "vote_on_bug",
      "description": "Vote on a bug report (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "bug_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the bug report to vote on"
          },
          "vote_type": {
            "type": "string",
            "enum": ["up", "down"],
            "description": "Type of vote to cast"
          }
        },
        "required": ["bug_id", "vote_type"]
      }
    },
    {
      "name": "add_bug_comment",
      "description": "Add a comment to a bug report (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "bug_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the bug report to comment on"
          },
          "content": {
            "type": "string",
            "description": "Content of the comment"
          }
        },
        "required": ["bug_id", "content"]
      }
    },
    {
      "name": "update_bug_status",
      "description": "Update the status of a bug report (requires authentication and appropriate permissions)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "bug_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the bug report to update"
          },
          "status": {
            "type": "string",
            "enum": ["open", "reviewing", "fixed", "wont_fix"],
            "description": "New status for the bug report"
          },
          "resolution_notes": {
            "type": "string",
            "description": "Optional notes about the status change"
          }
        },
        "required": ["bug_id", "status"]
      }
    },
    {
      "name": "register_user",
      "description": "Register a new user account",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password (minimum 8 characters)"
          },
          "display_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User's display name"
          }
        },
        "required": ["email", "password", "display_name"]
      }
    },
    {
      "name": "login_user",
      "description": "Authenticate a user and obtain access tokens",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        },
        "required": ["email", "password"]
      }
    },
    {
      "name": "get_user_profile",
      "description": "Get the current user's profile information (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "update_user_profile",
      "description": "Update the current user's profile information (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Updated display name"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to user's avatar image"
          }
        }
      }
    },
    {
      "name": "request_password_reset",
      "description": "Request a password reset for a user account",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the account to reset"
          }
        },
        "required": ["email"]
      }
    },
    {
      "name": "verify_email",
      "description": "Verify a user's email address using verification token",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Email verification token"
          }
        },
        "required": ["token"]
      }
    },
    {
      "name": "list_companies",
      "description": "List companies in the system with optional filtering",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Page number for pagination",
            "default": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Number of results per page",
            "default": 20
          },
          "verified_only": {
            "type": "boolean",
            "description": "Filter to show only verified companies",
            "default": false
          },
          "search": {
            "type": "string",
            "description": "Search term for company name or domain"
          }
        }
      }
    },
    {
      "name": "get_company",
      "description": "Retrieve detailed information about a specific company",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company to retrieve"
          }
        },
        "required": ["company_id"]
      }
    },
    {
      "name": "claim_company",
      "description": "Initiate the process to claim a company (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company to claim"
          },
          "verification_email": {
            "type": "string",
            "format": "email",
            "description": "Email address for verification (must be from company domain)"
          }
        },
        "required": ["company_id", "verification_email"]
      }
    },
    {
      "name": "verify_company_claim",
      "description": "Complete company verification using verification token (requires authentication)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company being verified"
          },
          "verification_token": {
            "type": "string",
            "description": "Verification token received via email"
          }
        },
        "required": ["company_id", "verification_token"]
      }
    },
    {
      "name": "get_company_dashboard",
      "description": "Get company dashboard data including bug statistics (requires authentication and company membership)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company"
          }
        },
        "required": ["company_id"]
      }
    },
    {
      "name": "add_team_member",
      "description": "Add a team member to a company (requires authentication and admin role in company)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company"
          },
          "user_email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user to add"
          },
          "role": {
            "type": "string",
            "enum": ["member", "admin"],
            "description": "Role to assign to the team member",
            "default": "member"
          }
        },
        "required": ["company_id", "user_email"]
      }
    },
    {
      "name": "remove_team_member",
      "description": "Remove a team member from a company (requires authentication and admin role in company)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the company"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user to remove"
          }
        },
        "required": ["company_id", "user_id"]
      }
    }
  ]
}