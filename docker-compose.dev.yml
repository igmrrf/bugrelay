version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bugrelay-postgres-dev
    environment:
      POSTGRES_DB: bugrelay_dev
      POSTGRES_USER: bugrelay_user
      POSTGRES_PASSWORD: bugrelay_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - bugrelay-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bugrelay_user -d bugrelay_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bugrelay-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bugrelay-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Go with Air for hot reloading)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bugrelay-backend-dev
    ports:
      - "8080:8080"
      - "2345:2345" # Delve debugger port
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bugrelay_dev
      - DB_USER=bugrelay_user
      - DB_PASSWORD=bugrelay_password
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - JWT_SECRET=dev-jwt-secret-key
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - LOG_OUTPUT=both
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - bugrelay-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: air -c .air.toml

  # Frontend (Next.js with hot reloading)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: bugrelay-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      - BACKEND_LOGS_URL=http://backend:8080
      - BACKEND_API_KEY=dev-api-key
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - frontend_logs:/app/logs
    networks:
      - bugrelay-dev
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: bugrelay-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - bugrelay-dev
      - monitoring
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: bugrelay-loki-dev
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - bugrelay-dev
      - monitoring
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: bugrelay-promtail-dev
    volumes:
      - ./monitoring/promtail/config.dev.yml:/etc/promtail/config.yml
      - backend_logs:/var/log/bugrelay
      - frontend_logs:/var/log/frontend
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - bugrelay-dev
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: bugrelay-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.dev.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - bugrelay-dev
      - monitoring
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: bugrelay-node-exporter-dev
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: bugrelay-cadvisor-dev
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: bugrelay-alertmanager-dev
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.dev.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: bugrelay-mailhog-dev
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - bugrelay-dev
    restart: unless-stopped

  # Database seeder (runs once)
  seeder:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bugrelay-seeder-dev
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bugrelay_dev
      - DB_USER=bugrelay_user
      - DB_PASSWORD=bugrelay_password
      - DB_SSLMODE=disable
      - LOG_LEVEL=info
    volumes:
      - ./backend:/app
    networks:
      - bugrelay-dev
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    restart: "no"
    command: >
      sh -c "
        echo 'Waiting for backend to be ready...' &&
        sleep 30 &&
        echo 'Running database seeder...' &&
        go run cmd/seed/main.go
      "

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  loki_data:
  prometheus_data:
  alertmanager_data:
  backend_logs:
  frontend_logs:

networks:
  bugrelay-dev:
    driver: bridge
  monitoring:
    driver: bridge