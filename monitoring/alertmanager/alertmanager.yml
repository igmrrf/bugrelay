global:
  # SMTP configuration - environment specific
  smtp_smarthost: '${SMTP_HOST:-mailhog:1025}'
  smtp_from: '${SMTP_FROM:-alerts@bugrelay.local}'
  smtp_auth_username: '${SMTP_USERNAME:-}'
  smtp_auth_password: '${SMTP_PASSWORD:-}'
  smtp_require_tls: ${SMTP_REQUIRE_TLS:-false}

route:
  group_by: ['alertname', 'environment', 'severity']
  # Development: faster grouping, Production: slower for batching
  group_wait: ${ALERT_GROUP_WAIT:-10s}
  group_interval: ${ALERT_GROUP_INTERVAL:-5m}
  repeat_interval: ${ALERT_REPEAT_INTERVAL:-1h}
  receiver: 'default-receiver'
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: ${CRITICAL_GROUP_WAIT:-10s}
      repeat_interval: ${CRITICAL_REPEAT_INTERVAL:-30m}
      routes:
        # Database critical alerts
        - match:
            service: database
          receiver: 'database-critical'
        # Security critical alerts
        - match:
            category: security
          receiver: 'security-critical'

    # Warning alerts - less frequent notifications
    - match:
        severity: warning
      receiver: 'warning-alerts'
      group_wait: ${WARNING_GROUP_WAIT:-2m}
      repeat_interval: ${WARNING_REPEAT_INTERVAL:-2h}
      routes:
        # Security warnings
        - match:
            category: security
          receiver: 'security-warnings'

    # Monitoring system alerts
    - match_re:
        job: '(prometheus|alertmanager|grafana).*'
      receiver: 'monitoring-alerts'

receivers:
  # Default receiver for unmatched alerts
  - name: 'default-receiver'
    email_configs:
      - to: '${DEFAULT_EMAIL_TO:-dev-team@bugrelay.local}'
        subject: '[${ENVIRONMENT:-dev}] BugRelay Alert: {{ .GroupLabels.alertname }}'
        body: |
          Environment: ${ENVIRONMENT:-development}
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          {{ if .Annotations.runbook_url }}
          Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}

  # Critical alerts - multiple channels
  - name: 'critical-alerts'
    email_configs:
      - to: '${CRITICAL_EMAIL_TO:-ops-team@bugrelay.local}'
        subject: 'üö® [${ENVIRONMENT:-dev} CRITICAL] {{ .GroupLabels.alertname }}'
        body: |
          üö® CRITICAL ALERT - ${ENVIRONMENT:-development} üö®
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ if .Annotations.runbook_url }}
          
          üìñ Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}
          
          This is a critical alert requiring immediate attention.
        headers:
          X-Priority: 'high'
          X-Environment: '${ENVIRONMENT:-development}'
    
    # Slack configuration (if enabled)
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '${SLACK_CRITICAL_CHANNEL:-#alerts-critical}'
        title: 'üö® [${ENVIRONMENT:-dev}] Critical: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          
          *Service:* {{ .Labels.service }}
          *Severity:* {{ .Labels.severity }}
          *Environment:* ${ENVIRONMENT:-development}
          {{ if .Annotations.runbook_url }}*Runbook:* {{ .Annotations.runbook_url }}{{ end }}
          {{ end }}
        send_resolved: true

    # PagerDuty integration (production only)
    pagerduty_configs:
      - routing_key: '${PAGERDUTY_INTEGRATION_KEY:-}'
        description: '[${ENVIRONMENT:-dev}] {{ .GroupLabels.alertname }}: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        severity: 'critical'

  # Database critical alerts
  - name: 'database-critical'
    email_configs:
      - to: '${DATABASE_EMAIL_TO:-dba-team@bugrelay.local}'
        subject: 'üóÑÔ∏è [${ENVIRONMENT:-dev} DATABASE CRITICAL] {{ .GroupLabels.alertname }}'
        body: |
          üóÑÔ∏è DATABASE CRITICAL ALERT - ${ENVIRONMENT:-development} üóÑÔ∏è
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Database Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ if .Annotations.runbook_url }}
          
          üìñ Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}
          
          Immediate database attention required!

    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '${SLACK_DATABASE_CHANNEL:-#database-alerts}'
        title: 'üóÑÔ∏è [${ENVIRONMENT:-dev}] Database Critical: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          
          *Instance:* {{ .Labels.instance }}
          *Environment:* ${ENVIRONMENT:-development}
          {{ if .Annotations.runbook_url }}*Runbook:* {{ .Annotations.runbook_url }}{{ end }}
          {{ end }}

  # Security critical alerts
  - name: 'security-critical'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-security-team@bugrelay.local}'
        subject: 'üîí [${ENVIRONMENT:-dev} SECURITY CRITICAL] {{ .GroupLabels.alertname }}'
        body: |
          üîí SECURITY CRITICAL ALERT - ${ENVIRONMENT:-development} üîí
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ end }}
          
          Immediate security investigation required!

    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '${SLACK_SECURITY_CHANNEL:-#security-alerts}'
        title: 'üîí [${ENVIRONMENT:-dev}] Security Critical: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          
          *Instance:* {{ .Labels.instance }}
          *Environment:* ${ENVIRONMENT:-development}
          {{ end }}

  # Warning alerts
  - name: 'warning-alerts'
    email_configs:
      - to: '${WARNING_EMAIL_TO:-ops-team@bugrelay.local}'
        subject: '‚ö†Ô∏è [${ENVIRONMENT:-dev} WARNING] {{ .GroupLabels.alertname }}'
        body: |
          ‚ö†Ô∏è WARNING ALERT - ${ENVIRONMENT:-development} ‚ö†Ô∏è
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ if .Annotations.runbook_url }}
          
          üìñ Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}

    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '${SLACK_WARNING_CHANNEL:-#alerts-warning}'
        title: '‚ö†Ô∏è [${ENVIRONMENT:-dev}] Warning: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          
          *Service:* {{ .Labels.service }}
          *Environment:* ${ENVIRONMENT:-development}
          {{ end }}
        send_resolved: true

  # Security warnings
  - name: 'security-warnings'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-security-team@bugrelay.local}'
        subject: 'üîç [${ENVIRONMENT:-dev} SECURITY WARNING] {{ .GroupLabels.alertname }}'
        body: |
          üîç SECURITY WARNING - ${ENVIRONMENT:-development} üîç
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ end }}

    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '${SLACK_SECURITY_CHANNEL:-#security-alerts}'
        title: 'üîç [${ENVIRONMENT:-dev}] Security Warning: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          *Environment:* ${ENVIRONMENT:-development}
          {{ end }}

  # Monitoring system alerts
  - name: 'monitoring-alerts'
    email_configs:
      - to: '${MONITORING_EMAIL_TO:-ops-team@bugrelay.local}'
        subject: 'üìä [${ENVIRONMENT:-dev} MONITORING] {{ .GroupLabels.alertname }}'
        body: |
          üìä MONITORING SYSTEM ALERT - ${ENVIRONMENT:-development} üìä
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.job }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ end }}

inhibit_rules:
  # Inhibit warning alerts when critical alerts are firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'service', 'instance']

  # Inhibit individual service alerts when the whole application is down
  - source_match:
      alertname: 'ApplicationDown'
    target_match_re:
      alertname: '(HighErrorRate|HighResponseTime|DatabaseConnectionFailure)'
    equal: ['instance']

  # Inhibit container alerts when the node is down
  - source_match_re:
      alertname: '(NodeDown|InstanceDown)'
    target_match_re:
      alertname: 'Container.*'
    equal: ['instance']